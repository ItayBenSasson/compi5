%{
    #include <stdio.h>
    #include "hw3_output.hpp"
    #include "logic.hpp"
    extern int yylineno;
    extern int yylex();
    void yyerror(const char* message);
    using namespace output;


%}


%token INT  
%token BYTE  
%token B  
%token BOOL  
%token NOT  
%token TRUE  
%token FALSE  
%token RETURN  
%token IF  
%token WHILE  
%token BREAK  
%token CONTINUE  
%token SC  
%token LBRACE  
%token RBRACE  
%token NUM  
%token ID  
%token STRING
%right ASSIGN 
%left OR
%left AND
%left EQ
%left RELOP
%left ADDOP
%left MULOP
%right NOT
%left LPAREN
%left RPAREN
%right ELSE



%%
Program: Statements                                                  {symbol_table::get_instance()->exit_scope();}

Statements: Statement                                               {}
            | Statements Statement                                  {}

Statement: LBRACE {symbol_table::get_instance()->enter_scope("brace");} Statements RBRACE        {symbol_table::get_instance()->exit_scope();}
           | Type ID SC                                             {symbol_table::get_instance()->add_entry($2, ($1)->type);                                default_store($2);}
           | Type ID ASSIGN Exp SC                                  {symbol_table::get_instance()->add_entry($2, $1, ($1)->type); symbol_table::get_instance()->check_assignment($2, $4);  store($2, $4);             }
            | ID ASSIGN Exp SC                                       {symbol_table::get_instance()->check_assignment($1, $3);                                                              store($1, $3);}
           | Call SC                                                {}
           | RETURN SC                                                                                                                                       {handle_return();}
           | IF LPAREN A RPAREN Statement C                                                                                                                  {handle_label($3, false);}
           | IF LPAREN A RPAREN Statement C ELSE {$$ = create_end_label(); jmp_end_label($$); handle_label($3, false); symbol_table::get_instance()->enter_scope("else");} Statement {symbol_table::get_instance()->exit_scope(); handle_label($8, true);}
           | WHILE {symbol_table::get_instance()->enter_scope("while");} LPAREN Exp RPAREN {handle_while($4);} Statement {symbol_table::get_instance()->exit_scope();}
           | BREAK SC                                               {symbol_table::get_instance()->check_while();                                             handle_break();}
           | CONTINUE SC                                            {symbol_table::get_instance()->check_continue();                                          handle_continue();}

//using parser.ypp_aux
A: Exp {symbol_table::get_instance()->enter_scope("if"); symbol_table::get_instance()->check_cond($1); $$= $1; handle_label($1, true);}
C: /*epsilon*/ {symbol_table::get_instance()->exit_scope();}

Call: ID LPAREN Exp RPAREN                                          {symbol_table::get_instance()->check_call($1, $3);
                                                                    $$ = new ExpNode(($3)->line,symbol_table::get_instance()->get_func_type($1));                handle_call($$, $1, $3);}

Type: INT                                                           {$$ = new ExpNode(($1)->line, "INT", "INT");}                   
      | BYTE                                                        {$$ = new ExpNode(($1)->line, "BYTE", "BYTE");}
      | BOOL                                                        {$$ = new ExpNode(($1)->line, "BOOL", "BOOL");}

Exp: LPAREN Exp RPAREN                                               {$$ = $2;}                      
     | Exp ADDOP Exp                                                {$$ = new ExpNode(($2)->line, symbol_table::get_instance()->get_op_type($1, $3), symbol_table::get_instance()->get_op_type($1, $3));                                          handle_bin_operation($$, $1, $3, $2);}
     | Exp MULOP Exp                                                {$$ = new ExpNode(($2)->line, symbol_table::get_instance()->get_op_type($1, $3), symbol_table::get_instance()->get_op_type($1, $3));                                          handle_bin_operation($$, $1, $3, $2);}
     | ID                                                           {$$ = new ExpNode(($1)->line, symbol_table::get_instance()->get_var_type($1), symbol_table::get_instance()->get_var_type($1));               load($$, $1);}
     | Call                                                         {$$ = $1;}
     | NUM                                                          {$$ = new ExpNode(($1)->line, "INT", "INT");                                                        handle_number($$, $1);}
     | NUM B                                                        {$$ = new ExpNode(($1)->line, "BYTE", "BYTE"); symbol_table::get_instance()->check_byte($1);                                       handle_byte($$, $1);}
     | STRING                                                       {$$ = new ExpNode(($1)->line, "STRING", "STRING");                                                handle_str_value($$, $1);      handle_string($$, $1);}
     | TRUE                                                         {$$ = new ExpNode(($1)->line, "BOOL", "BOOL");                                                       handle_bool($$, true);}
     | FALSE                                                        {$$ = new ExpNode(($1)->line, "BOOL", "BOOL");                                                       handle_bool($$, false);}
     | NOT Exp                                                      {$$ = new ExpNode(($1)->line, "BOOL", "BOOL"); symbol_table::get_instance()->check_cond($2);                                       not_expression($$, $2);}
     | Exp AND {and_left_part($1);} Exp                                                  {$$ = new ExpNode(($2)->line, "BOOL", "BOOL"); symbol_table::get_instance()->check_cond($1); symbol_table::get_instance()->check_cond($4);                       and_right_part($$, $1, $4);}
     | Exp OR  {or_left_part($1); } Exp                                                   {$$ = new ExpNode(($2)->line, "BOOL", "BOOL"); symbol_table::get_instance()->check_cond($1); symbol_table::get_instance()->check_cond($4);                       or_right_part($$, $1, $4);}
     | Exp EQ Exp                                                   {$$ = new ExpNode(($2)->line, "BOOL", "BOOL"); symbol_table::get_instance()->check_int($1); symbol_table::get_instance()->check_int($3);                         handle_rel_operation($$, $1, $3, $2);}
     | Exp RELOP Exp                                                {$$ = new ExpNode(($2)->line, "BOOL", "BOOL"); symbol_table::get_instance()->check_int($1); symbol_table::get_instance()->check_int($3);                         handle_rel_operation($$, $1, $3, $2);}
     | LPAREN Type RPAREN Exp                                       {$$ = new ExpNode(($4)->line, $2->type, $2->type); symbol_table::get_instance()->check_int($4);                                      $$->iid = $4->iid;}
     
%%


void yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(0);
}

int main()
{
    handle_start();
    int res = yyparse();
    handle_end();
    return res;
}